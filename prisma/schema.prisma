// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ROLE {
  ADMIN
  PATIENT
  DOCTOR
}

enum APPOINTMENTSTATUS {
  PENDING
  CANCELLED
  DONE
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  password    String
  role        ROLE          @default(PATIENT)
  profile     Profile?
  session     Session[]
  appointment Appointment[]
  diagnosis   Diagnosis[]
  testresults TestResults[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id            String       @id @default(uuid())
  name          String
  address       String?
  nin           String
  imageUrl      String?
  telephone     String
  date_of_birth String?
  specialty     Specialties? @relation(fields: [specialtyId], references: [id])
  specialtyId   Int?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([specialtyId])
}

model Specialties {
  id Int @id @default(autoincrement())

  name    String
  profile Profile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id Int @id @default(autoincrement())

  title        String
  sessionDate  DateTime
  noOfPatients Int

  doctor   User   @relation(fields: [doctorId], references: [id])
  doctorId String

  sessionTime SessionTime[]
  appointment Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([doctorId])
}

model SessionTime {
  id Int @id @default(autoincrement())

  startTime DateTime @db.Time()
  endTime   DateTime @db.Time()

  status Boolean @default(false)

  appointmentNo Int

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int

  appointment Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
}

model Appointment {
  id Int @id @default(autoincrement())

  appointmentNo   Int
  appointmentDate DateTime

  status APPOINTMENTSTATUS @default(PENDING)

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int

  sessionTime   SessionTime @relation(fields: [sessionTimeId], references: [id])
  sessionTimeId Int

  patient   User   @relation(fields: [patientId], references: [id])
  patientId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@index([patientId])
}

model Diagnosis {
  id Int @id @default(autoincrement())

  patient   User   @relation(fields: [patientId], references: [id])
  patientId String

  doctorName             String
  complaint              String? @db.MediumText()
  complaint_history      String? @db.MediumText()
  recommended_tests      String? @db.MediumText()
  diagnosis_confirmation String? @db.MediumText()
  prescription           String? @db.MediumText()
  prescription_comment   String? @db.MediumText()
  management_plan        String? @db.MediumText()

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([patientId])
}

model TestResults {
  id Int @id @default(autoincrement())

  test_url String

  testName String

  patient   User   @relation(fields: [patientId], references: [id])
  patientId String

  doctorName String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([patientId])
}
